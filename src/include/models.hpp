
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.15.0

#include <stan/model/model_header.hpp>

namespace model_IWprSim_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_IWprSim : public prob_grad {
private:
    int nu;
    int d;
    matrix_d R;
public:
    model_IWprSim(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_IWprSim(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_IWprSim_namespace::model_IWprSim";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "nu", "int", context__.to_vec());
        nu = int(0);
        vals_i__ = context__.vals_i("nu");
        pos__ = 0;
        nu = vals_i__[pos__++];
        context__.validate_dims("data initialization", "d", "int", context__.to_vec());
        d = int(0);
        vals_i__ = context__.vals_i("d");
        pos__ = 0;
        d = vals_i__[pos__++];
        validate_non_negative_index("R", "d", d);
        validate_non_negative_index("R", "d", d);
        context__.validate_dims("data initialization", "R", "matrix_d", context__.to_vec(d,d));
        validate_non_negative_index("R", "d", d);
        validate_non_negative_index("R", "d", d);
        R = matrix_d(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        vals_r__ = context__.vals_r("R");
        pos__ = 0;
        size_t R_m_mat_lim__ = d;
        size_t R_n_mat_lim__ = d;
        for (size_t n_mat__ = 0; n_mat__ < R_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < R_m_mat_lim__; ++m_mat__) {
                R(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"nu",nu,0);
        check_greater_or_equal(function__,"d",d,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("Sig_iw", "d", d);
        num_params_r__ += ((d * (d - 1)) / 2 + d);
    }

    ~model_IWprSim() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("Sig_iw")))
            throw std::runtime_error("variable Sig_iw missing");
        vals_r__ = context__.vals_r("Sig_iw");
        pos__ = 0U;
        validate_non_negative_index("Sig_iw", "d", d);
        validate_non_negative_index("Sig_iw", "d", d);
        context__.validate_dims("initialization", "Sig_iw", "matrix_d", context__.to_vec(d,d));
        // generate_declaration Sig_iw
        matrix_d Sig_iw(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        for (int j2__ = 0U; j2__ < d; ++j2__)
            for (int j1__ = 0U; j1__ < d; ++j1__)
                Sig_iw(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cov_matrix_unconstrain(Sig_iw);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable Sig_iw: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sig_iw;
        (void) Sig_iw;  // dummy to suppress unused var warning
        if (jacobian__)
            Sig_iw = in__.cov_matrix_constrain(d,lp__);
        else
            Sig_iw = in__.cov_matrix_constrain(d);


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(inv_wishart_log<propto__>(Sig_iw, nu, R));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("Sig_iw");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(d);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_IWprSim_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d Sig_iw = in__.cov_matrix_constrain(d);
        for (int k_1__ = 0; k_1__ < d; ++k_1__) {
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                vars__.push_back(Sig_iw(k_0__, k_1__));
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_IWprSim";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sig_iw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (d + ((d * (d - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sig_iw" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.15.0

#include <stan/model/model_header.hpp>

namespace model_sIWprSim_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

class model_sIWprSim : public prob_grad {
private:
    int d;
    double xi;
    double nu;
    matrix_d R;
public:
    model_sIWprSim(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        typedef boost::ecuyer1988 rng_t;
        rng_t base_rng(0);  // 0 seed default
        ctor_body(context__, base_rng, pstream__);
    }

    template <class RNG>
    model_sIWprSim(stan::io::var_context& context__,
        RNG& base_rng__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, base_rng__, pstream__);
    }

    template <class RNG>
    void ctor_body(stan::io::var_context& context__,
                   RNG& base_rng__,
                   std::ostream* pstream__) {
        current_statement_begin__ = -1;

        static const char* function__ = "model_sIWprSim_namespace::model_sIWprSim";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "d", "int", context__.to_vec());
        d = int(0);
        vals_i__ = context__.vals_i("d");
        pos__ = 0;
        d = vals_i__[pos__++];
        context__.validate_dims("data initialization", "xi", "double", context__.to_vec());
        xi = double(0);
        vals_r__ = context__.vals_r("xi");
        pos__ = 0;
        xi = vals_r__[pos__++];
        context__.validate_dims("data initialization", "nu", "double", context__.to_vec());
        nu = double(0);
        vals_r__ = context__.vals_r("nu");
        pos__ = 0;
        nu = vals_r__[pos__++];
        validate_non_negative_index("R", "d", d);
        validate_non_negative_index("R", "d", d);
        context__.validate_dims("data initialization", "R", "matrix_d", context__.to_vec(d,d));
        validate_non_negative_index("R", "d", d);
        validate_non_negative_index("R", "d", d);
        R = matrix_d(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        vals_r__ = context__.vals_r("R");
        pos__ = 0;
        size_t R_m_mat_lim__ = d;
        size_t R_n_mat_lim__ = d;
        for (size_t n_mat__ = 0; n_mat__ < R_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < R_m_mat_lim__; ++m_mat__) {
                R(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate, data variables
        check_greater_or_equal(function__,"d",d,0);
        check_greater_or_equal(function__,"xi",xi,0);
        check_greater_or_equal(function__,"nu",nu,0);
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        validate_non_negative_index("delta", "d", d);
        num_params_r__ += d;
        validate_non_negative_index("sQ", "d", d);
        num_params_r__ += ((d * (d - 1)) / 2 + d);
    }

    ~model_sIWprSim() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("delta")))
            throw std::runtime_error("variable delta missing");
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "d", d);
        context__.validate_dims("initialization", "delta", "vector_d", context__.to_vec(d));
        // generate_declaration delta
        vector_d delta(static_cast<Eigen::VectorXd::Index>(d));
        for (int j1__ = 0U; j1__ < d; ++j1__)
            delta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,delta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta: ") + e.what());
        }

        if (!(context__.contains_r("sQ")))
            throw std::runtime_error("variable sQ missing");
        vals_r__ = context__.vals_r("sQ");
        pos__ = 0U;
        validate_non_negative_index("sQ", "d", d);
        validate_non_negative_index("sQ", "d", d);
        context__.validate_dims("initialization", "sQ", "matrix_d", context__.to_vec(d,d));
        // generate_declaration sQ
        matrix_d sQ(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        for (int j2__ = 0U; j2__ < d; ++j2__)
            for (int j1__ = 0U; j1__ < d; ++j1__)
                sQ(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cov_matrix_unconstrain(sQ);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sQ: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  delta;
        (void) delta;  // dummy to suppress unused var warning
        if (jacobian__)
            delta = in__.vector_lb_constrain(0,d,lp__);
        else
            delta = in__.vector_lb_constrain(0,d);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  sQ;
        (void) sQ;  // dummy to suppress unused var warning
        if (jacobian__)
            sQ = in__.cov_matrix_constrain(d,lp__);
        else
            sQ = in__.cov_matrix_constrain(d);


        // transformed parameters
        validate_non_negative_index("D", "d", d);
        validate_non_negative_index("D", "d", d);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  D(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, DUMMY_VAR__);
        stan::math::fill(D,DUMMY_VAR__);
        validate_non_negative_index("Sig_siw", "d", d);
        validate_non_negative_index("Sig_siw", "d", d);
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sig_siw(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        (void) Sig_siw;  // dummy to suppress unused var warning

        stan::math::initialize(Sig_siw, DUMMY_VAR__);
        stan::math::fill(Sig_siw,DUMMY_VAR__);


        try {
            for (int i = 1; i <= d; ++i) {

                stan::math::assign(get_base1_lhs(D,i,i,"D",1), sqrt(get_base1(delta,i,"delta",1)));
            }
            stan::math::assign(Sig_siw, multiply(multiply(D,sQ),D));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < d; ++i0__) {
            for (int i1__ = 0; i1__ < d; ++i1__) {
                if (stan::math::is_uninitialized(D(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: D" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }
        for (int i0__ = 0; i0__ < d; ++i0__) {
            for (int i1__ = 0; i1__ < d; ++i1__) {
                if (stan::math::is_uninitialized(Sig_siw(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Sig_siw" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            for (int i = 1; i <= d; ++i) {
                lp_accum__.add(lognormal_log<propto__>(get_base1(delta,i,"delta",1), 0, pow(xi,2)));
            }
            lp_accum__.add(inv_wishart_log<propto__>(sQ, nu, multiply(0.80000000000000004,R)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("delta");
        names__.push_back("sQ");
        names__.push_back("D");
        names__.push_back("Sig_siw");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(d);
        dims__.push_back(d);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_sIWprSim_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d delta = in__.vector_lb_constrain(0,d);
        matrix_d sQ = in__.cov_matrix_constrain(d);
        for (int k_0__ = 0; k_0__ < d; ++k_0__) {
            vars__.push_back(delta[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < d; ++k_1__) {
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                vars__.push_back(sQ(k_0__, k_1__));
            }
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        validate_non_negative_index("D", "d", d);
        validate_non_negative_index("D", "d", d);
        matrix_d D(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        (void) D;  // dummy to suppress unused var warning

        stan::math::initialize(D, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(D,DUMMY_VAR__);
        validate_non_negative_index("Sig_siw", "d", d);
        validate_non_negative_index("Sig_siw", "d", d);
        matrix_d Sig_siw(static_cast<Eigen::VectorXd::Index>(d),static_cast<Eigen::VectorXd::Index>(d));
        (void) Sig_siw;  // dummy to suppress unused var warning

        stan::math::initialize(Sig_siw, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(Sig_siw,DUMMY_VAR__);


        try {
            for (int i = 1; i <= d; ++i) {

                stan::math::assign(get_base1_lhs(D,i,i,"D",1), sqrt(get_base1(delta,i,"delta",1)));
            }
            stan::math::assign(Sig_siw, multiply(multiply(D,sQ),D));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < d; ++k_1__) {
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                vars__.push_back(D(k_0__, k_1__));
            }
        }
        for (int k_1__ = 0; k_1__ < d; ++k_1__) {
            for (int k_0__ = 0; k_0__ < d; ++k_0__) {
                vars__.push_back(Sig_siw(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_sIWprSim";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sQ" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sig_siw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (d + ((d * (d - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sQ" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "D" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= d; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sig_siw" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}




#endif
