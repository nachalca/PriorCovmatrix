/*
    PriorCovmatrix is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    PriorCovmatrix is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with PriorCovmatrix.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_SS_iw_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_SS_iw");
    reader.add_event(34, 34, "end", "model_SS_iw");
    return reader;
}

#include <meta_header.hpp>
 class model_SS_iw : public prob_grad {
private:
    int k;
    double eta;
    matrix_d R;
    double sigma_mu;
    double sigma_sc;
    int prior_sigma;
public:
    model_SS_iw(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_SS_iw(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_SS_iw_namespace::model_SS_iw";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "eta", "double", context__.to_vec());
            eta = double(0);
            vals_r__ = context__.vals_r("eta");
            pos__ = 0;
            eta = vals_r__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("R", "k", k);
            validate_non_negative_index("R", "k", k);
            context__.validate_dims("data initialization", "R", "matrix_d", context__.to_vec(k,k));
            validate_non_negative_index("R", "k", k);
            validate_non_negative_index("R", "k", k);
            R = matrix_d(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(k));
            vals_r__ = context__.vals_r("R");
            pos__ = 0;
            size_t R_m_mat_lim__ = k;
            size_t R_n_mat_lim__ = k;
            for (size_t n_mat__ = 0; n_mat__ < R_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < R_m_mat_lim__; ++m_mat__) {
                    R(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "sigma_mu", "double", context__.to_vec());
            sigma_mu = double(0);
            vals_r__ = context__.vals_r("sigma_mu");
            pos__ = 0;
            sigma_mu = vals_r__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "sigma_sc", "double", context__.to_vec());
            sigma_sc = double(0);
            vals_r__ = context__.vals_r("sigma_sc");
            pos__ = 0;
            sigma_sc = vals_r__[pos__++];
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "prior_sigma", "int", context__.to_vec());
            prior_sigma = int(0);
            vals_i__ = context__.vals_i("prior_sigma");
            pos__ = 0;
            prior_sigma = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"k",k,0);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"eta",eta,0);
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"sigma_mu",sigma_mu,0);
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"sigma_sc",sigma_sc,0);
            current_statement_begin__ = 8;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 11;
            validate_non_negative_index("xOmega", "k", k);
            num_params_r__ += ((k * (k - 1)) / 2 + k);
            current_statement_begin__ = 12;
            validate_non_negative_index("sigma", "k", k);
            num_params_r__ += k;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_SS_iw() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("xOmega")))
            throw std::runtime_error("variable xOmega missing");
        vals_r__ = context__.vals_r("xOmega");
        pos__ = 0U;
        validate_non_negative_index("xOmega", "k", k);
        validate_non_negative_index("xOmega", "k", k);
        context__.validate_dims("initialization", "xOmega", "matrix_d", context__.to_vec(k,k));
        matrix_d xOmega(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(k));
        for (int j2__ = 0U; j2__ < k; ++j2__)
            for (int j1__ = 0U; j1__ < k; ++j1__)
                xOmega(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cov_matrix_unconstrain(xOmega);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable xOmega: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        validate_non_negative_index("sigma", "k", k);
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(k));
        vector_d sigma(static_cast<Eigen::VectorXd::Index>(k));
        for (int j1__ = 0U; j1__ < k; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  xOmega;
            (void) xOmega;  // dummy to suppress unused var warning
            if (jacobian__)
                xOmega = in__.cov_matrix_constrain(k,lp__);
            else
                xOmega = in__.cov_matrix_constrain(k);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.vector_lb_constrain(0,k,lp__);
            else
                sigma = in__.vector_lb_constrain(0,k);


            // transformed parameters
            current_statement_begin__ = 15;
            validate_non_negative_index("Omega", "k", k);
            validate_non_negative_index("Omega", "k", k);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Omega(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(k));
            (void) Omega;  // dummy to suppress unused var warning

            stan::math::initialize(Omega, DUMMY_VAR__);
            stan::math::fill(Omega,DUMMY_VAR__);
            current_statement_begin__ = 16;
            validate_non_negative_index("gamma2", "k", k);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  gamma2(static_cast<Eigen::VectorXd::Index>(k));
            (void) gamma2;  // dummy to suppress unused var warning

            stan::math::initialize(gamma2, DUMMY_VAR__);
            stan::math::fill(gamma2,DUMMY_VAR__);
            current_statement_begin__ = 17;
            validate_non_negative_index("inv_gamma", "k", k);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  inv_gamma(static_cast<Eigen::VectorXd::Index>(k));
            (void) inv_gamma;  // dummy to suppress unused var warning

            stan::math::initialize(inv_gamma, DUMMY_VAR__);
            stan::math::fill(inv_gamma,DUMMY_VAR__);


            current_statement_begin__ = 18;
            stan::math::assign(gamma2, diagonal(xOmega));
            current_statement_begin__ = 19;
            stan::math::assign(inv_gamma, inv_sqrt(gamma2));
            current_statement_begin__ = 20;
            stan::math::assign(Omega, quad_form_diag(xOmega,inv_gamma));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < k; ++i0__) {
                for (int i1__ = 0; i1__ < k; ++i1__) {
                    if (stan::math::is_uninitialized(Omega(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Omega" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < k; ++i0__) {
                if (stan::math::is_uninitialized(gamma2(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: gamma2" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < k; ++i0__) {
                if (stan::math::is_uninitialized(inv_gamma(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: inv_gamma" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;

            // model body

            current_statement_begin__ = 23;
            lp_accum__.add(inv_wishart_log<propto__>(xOmega, eta, R));
            current_statement_begin__ = 24;
            if (as_bool(logical_eq(prior_sigma,1))) {
                current_statement_begin__ = 25;
                lp_accum__.add(lognormal_log(sigma,sigma_mu,sigma_sc));
            } else if (as_bool(logical_eq(prior_sigma,2))) {
                current_statement_begin__ = 27;
                lp_accum__.add(cauchy_log(sigma,sigma_mu,sigma_sc));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("xOmega");
        names__.push_back("sigma");
        names__.push_back("Omega");
        names__.push_back("gamma2");
        names__.push_back("inv_gamma");
        names__.push_back("Sigma");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(k);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dims__.push_back(k);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_SS_iw_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d xOmega = in__.cov_matrix_constrain(k);
        vector_d sigma = in__.vector_lb_constrain(0,k);
            for (int k_1__ = 0; k_1__ < k; ++k_1__) {
                for (int k_0__ = 0; k_0__ < k; ++k_0__) {
                vars__.push_back(xOmega(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 15;
            validate_non_negative_index("Omega", "k", k);
            validate_non_negative_index("Omega", "k", k);
            matrix_d Omega(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(k));
            (void) Omega;  // dummy to suppress unused var warning

            stan::math::initialize(Omega, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Omega,DUMMY_VAR__);
            current_statement_begin__ = 16;
            validate_non_negative_index("gamma2", "k", k);
            vector_d gamma2(static_cast<Eigen::VectorXd::Index>(k));
            (void) gamma2;  // dummy to suppress unused var warning

            stan::math::initialize(gamma2, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(gamma2,DUMMY_VAR__);
            current_statement_begin__ = 17;
            validate_non_negative_index("inv_gamma", "k", k);
            vector_d inv_gamma(static_cast<Eigen::VectorXd::Index>(k));
            (void) inv_gamma;  // dummy to suppress unused var warning

            stan::math::initialize(inv_gamma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(inv_gamma,DUMMY_VAR__);


            current_statement_begin__ = 18;
            stan::math::assign(gamma2, diagonal(xOmega));
            current_statement_begin__ = 19;
            stan::math::assign(inv_gamma, inv_sqrt(gamma2));
            current_statement_begin__ = 20;
            stan::math::assign(Omega, quad_form_diag(xOmega,inv_gamma));

            // validate transformed parameters
            current_statement_begin__ = 15;
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;

            // write transformed parameters
            for (int k_1__ = 0; k_1__ < k; ++k_1__) {
                for (int k_0__ = 0; k_0__ < k; ++k_0__) {
                vars__.push_back(Omega(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(gamma2[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(inv_gamma[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 30;
            validate_non_negative_index("Sigma", "k", k);
            matrix_d Sigma(static_cast<Eigen::VectorXd::Index>(k),static_cast<Eigen::VectorXd::Index>(k));
            (void) Sigma;  // dummy to suppress unused var warning

            stan::math::initialize(Sigma, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(Sigma,DUMMY_VAR__);


            current_statement_begin__ = 31;
            stan::math::assign(Sigma, quad_form_diag(Omega,sigma));

            // validate generated quantities
            current_statement_begin__ = 30;
            stan::math::check_cov_matrix(function__,"Sigma",Sigma);

            // write generated quantities
            for (int k_1__ = 0; k_1__ < k; ++k_1__) {
                for (int k_0__ = 0; k_0__ < k; ++k_0__) {
                vars__.push_back(Sigma(k_0__, k_1__));
                }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_SS_iw";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= k; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "xOmega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= k; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inv_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= k; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (k + ((k * (k - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "xOmega" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= k; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Omega" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "inv_gamma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= (k + ((k * (k - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef model_SS_iw_namespace::model_SS_iw stan_model;


#endif
